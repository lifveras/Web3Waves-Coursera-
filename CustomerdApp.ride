{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

@Callable(i)
func customerBuyProduct(product: String) = {
    let pmt = i.payment.extract()
    if(pmt.assetId.isDefined()) then {
        throw("Can use Waves only at the moment")
    } else {
        let customerAddress = i.caller.bytes.toBase58String()
        let price = match getInteger(this, product + "_coupon_price") {
                case a:Int => a
                case _ => 0
        }
        if (pmt.amount < price) then {
            throw("Purchase amount cannot be less than item price")
        } else if (pmt.amount > price) then {
            throw("Purchase amount cannot be higher than item price")
        } else {
            WriteSet(
                [
                    DataEntry("status:purchase_" + product + "_customer_" + customerAddress, "confirmed"),
                    DataEntry("price:purchase_"+ product + "_customer_" + customerAddress, price)
                ]
            )
        }
    }
}

# @Callable(i)
# func customerBuyB(amount: Int) = {
#     let pmt = i.payment.extract()
#     if(pmt.assetId.isDefined()) then {
#         throw("Can use Waves only at the moment")
#     } else {
#         let customerAddress = i.caller.bytes.toBase58String()
#         let price = match getInteger(this, "item_B_coupon_price") {
#                 case a:Int => a
#                 case _ => 0
#         }
#         if (amount < price) then {
#             throw("Purchase amount cannot be less than item price")
#         } else if (amount > price) then {
#             throw("Purchase amount cannot be higher than item price")
#         } else {
#             WriteSet(
#                 [
#                     DataEntry("status:purchase_item_B_customer_" + customerAddress, "confirmed"),
#                     DataEntry("price:purchase_item_B_customer_" + customerAddress, price)
#                 ]
#             )
#         }
#     }
# }

@Verifier(tx)
func verify() = true
# func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
        
