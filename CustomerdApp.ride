{-# STDLIB_VERSION 3 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}


@Callable(i)
func customerBuyA (amount) = {
    let pmt = extract(i.payment)
    if (isDefined(pmt.assetId))
        then throw("Can use Waves only at the moment")
        else {
            let customerAddress = toBase58String(i.caller.bytes)
            let price =             match getInteger(this, "item_A_coupon_price") {
                case a: Int => 
                    a
                case _ => 
                    0
            }
            if ((price > amount))
                then throw("Purchase amount cannot be less than item price")
                else if ((amount > price))
                    then throw("Purchase amount cannot be higher than item price")
                    else WriteSet([DataEntry(("status:purchase_item_A_customer_" + customerAddress), "confirmed"), DataEntry(("price:purchase_item_A_customer_" + customerAddress), price)])
            }
    }



@Callable(i)
func customerBuyB (amount) = {
    let pmt = extract(i.payment)
    if (isDefined(pmt.assetId))
        then throw("Can use Waves only at the moment")
        else {
            let customerAddress = toBase58String(i.caller.bytes)
            let price =             match getInteger(this, "item_B_coupon_price") {
                case a: Int => 
                    a
                case _ => 
                    0
            }
            if ((price > amount))
                then throw("Purchase amount cannot be less than item price")
                else if ((amount > price))
                    then throw("Purchase amount cannot be higher than item price")
                    else WriteSet([DataEntry(("status:purchase_item_B_customer_" + customerAddress), "confirmed"), DataEntry(("price:purchase_item_B_customer_" + customerAddress), price)])
            }
    }
