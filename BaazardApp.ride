{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let NONE = "NONE"
let VOTERS = 3
let QUORUM = 2

let FEATURED = "featured"
let DELISTED = "delisted"

let VOTING = "voting"
let REVEAL = "reveal"

func getStringByKey(key: String) = {
  match getString(this, key)  {
    case a:String => a
    case _ => NONE
  }
}

func getIntegerByKey(key: String) = {
  match getInteger(this, key)  {
    case a:Int => a
    case _ => 0
  }
}

func getKeyItem(supplier: String, title: String) = {
  let supplierTitle = supplier + title
  "item_" + supplierTitle.toBytes().sha256().toBase58String()
}

func getKeyItemSupplier(item: String) = item + "_owner"
func getKeyItemPrice(item: String) = item + "_price"
func getKeyItemData(item: String) = item + "_data"

func getKeyCommit(item: String, user: String) = item + "_" + user + "_commmit"
func getKeyCommitsCount(item: String) = item + "_cmtcnt"
func getKeyReveal(item: String, user: String) = item + "_" + user + "_reveal"
func getKeyItemStatus(item: String) = item + "_status"
func getKeyVotesCount(item: String, vote: String) = item + "_res:" + vote

func getKeyUserItemCounter(user: String, item: String) = {
  item + "_" + user + "_cnt"
}

func getKeyBalanceSupplier(account: String) = {
  account + "_balance"
}

func getValueBalanceSupplier(account: String) = {
  let supplierBalanceKey = getKeyBalanceSupplier(account)
  match getInteger(this, supplierBalanceKey){
    case a:Int => a
    case _ => 0
  }
}

func getValueUserItemCounter(user: String, item: String) = {
  let userItemCounterKey = getKeyUserItemCounter(user, item)
  match getInteger(this, userItemCounterKey) {
    case a: Int => a
    case _ => 0
  }
}

func getUserItemPrice (item: String) = {
  let keyItemPrice = getKeyItemPrice(item)
  getInteger(this, keyItemPrice)
}

func getValueCommit(item: String, user: String) = getStringByKey(getKeyCommit(item, user))
func getValueCommitsCount(item: String) = getIntegerByKey(getKeyCommitsCount(item))
func getValueReveal(item: String, user: String) = getStringByKey(getKeyReveal(item, user))
func getValueItemStatus(item: String) = getStringByKey(getKeyItemStatus(item))
func getValueVotesCount(item: String, vote: String) = getIntegerByKey(getKeyVotesCount(item, vote))

func getValueItemPrice(item: String) = {
  let keyItemPrice = getKeyItemPrice(item)
  getIntegerValue(this, keyItemPrice)
}

func getValueItemSupplier(account: String) = {
  getStringByKey(getKeyItemSupplier(account))
}

####################################################
# ------------- Module 4  Local Functions ----------
func getKeySupplier(user: String) = user + "_supp"

func getKeyItemSupplierApproval(itemTitle: String, supplier: String) = {
  let key = itemTitle + supplier 
  key.toBytes().sha256().toBase58String() + "aprvl"
}

func getValueSupplier(supplier: String) = {
  getStringByKey(getKeySupplier(supplier))
}

func getValueItemSupplierApproval(itemTitle: String, supplier: String) = {
  getStringByKey(getKeyItemSupplierApproval(itemTitle, supplier))
}

# ------------- Module 4  Local Functions ----------
####################################################

# 0. Validate price and existance of the item
# 1. Get suppliers address
# 2. Generate itemId


@Callable(i)
func addItem(title: String, price: Int, data: String) = {
    let supplierAddress = toBase58String(i.caller.bytes)
    let item = getKeyItem(supplierAddress, title)
    if(price <= 0) then throw("Purchase amount cannot be less than item price")
    else if(getValueItemSupplier(item) != NONE) then throw("An item is already exists")
    else {
         WriteSet(
            [
                DataEntry(getKeyItemSupplier(item), supplierAddress),
                DataEntry(getKeyItemPrice(item), price),
                DataEntry(getKeyItemData(item), data)
            ]
        )
    }
}

@Callable(i)
func purchase(item: String) = {
  let pmt = i.payment.extract()
  if(isDefined(pmt.assetId)) then throw("you can bu tokens only with Waves tokens")
  else {
    let userAddress = i.caller.bytes.toBase58String()
    let price = getValueItemPrice(item)
    let supplierAddress = getValueItemSupplier(item)

    if (pmt.amount < price) then throw("Purchase amount cannot be less than item price")
    else if (pmt.amount > price) then throw("Purchase amount cannot be higher than item price")
    else if (supplierAddress == NONE) then throw("Supplier does not exist")
    else {
      let userItemCounter = getKeyUserItemCounter(userAddress, item)
      let newValueUserItemCounter = getValueUserItemCounter(userAddress, item) + 1

      let supplierBalanceKey = getKeyBalanceSupplier(supplierAddress)
      let newSupplierBalance = getValueBalanceSupplier(supplierAddress) + pmt.amount

      WriteSet([
        DataEntry(userItemCounter, newValueUserItemCounter),
        DataEntry(supplierBalanceKey, newSupplierBalance)
      ])
    }
  }

} 

#Allow customers to vote for items using commit-reveal voting
@Callable(i)
func voteCommit(item: String, hash: String) = {
  let user = i.caller.bytes.toBase58String()
  let commitsCount = getValueCommitsCount(item) 
  let status = getValueItemStatus(item)
  if (commitsCount >= VOTERS) then throw("Reached max numer of voters: " + toString(VOTERS))
  else if (getValueCommit(item, user) != NONE) then throw("You voted already")
  else if (getKeyItemSupplier(item) == NONE) then throw("Item does not exist")
  else if (status != NONE && status != VOTING) then throw("Voting is not active for this item now")
  else {
    let newStatus = if(commitsCount == VOTERS) then REVEAL else VOTING
    WriteSet(
      [
        DataEntry(getKeyCommit(item, user), hash),
        DataEntry(getKeyCommitsCount(item), commitsCount + 1),
        DataEntry(getKeyItemStatus(item), newStatus)
      ]
    )
  }
}

#Allow customers to vote for items using commit-reveal voting
@Callable(i)
func voteReveal(item: String, vote: String, salt: String) = {
  let user = i.caller.bytes.toBase58String()
  let status = getValueItemStatus(item)
  let newVotesCount = getValueVotesCount(item, vote) + 1
  let saltedVote = item + vote + salt

  if (saltedVote.toBytes().sha256().toBase58String() != getValueCommit(item, user)) then
    throw("Reveal data is not valid")
  else if (getValueCommitsCount(item) < VOTERS) then throw("Max number of voters not reached")
  else if (getValueReveal(item, user) !=  NONE) then throw("You voted already")
  else if (status != VOTING && status !=  REVEAL) then throw("Voting is not active of this item now")
  else if (vote != FEATURED && vote != DELISTED) then throw("Provided voting option is incorrect")
  else {
    let newStatus = if (newVotesCount >= QUORUM) then vote else REVEAL
    WriteSet([
      DataEntry(getKeyCommit(item, user), vote),
      DataEntry(getKeyVotesCount(item, user), newVotesCount),
      DataEntry(getKeyItemStatus(item), newStatus)
    ])
  }
}

########################################################
# ------------- Module 4  Callable Functions ----------

# Allow suppliers to register
@Callable(i)
func supplierRegister() = {
  let supplierAddress = i.caller.bytes.toBase58String()

  if (getValueSupplier(supplierAddress) != NONE) then
    throw("Supplier already registered")
  else {
    WriteSet([
      DataEntry(getKeySupplier(supplierAddress), supplierAddress)
    ])
  }
}

# Allow suppliers to add items
@Callable(i)
func addItemToSupplier(title: String, price: Int, data: String) = {
    let supplierAddress = toBase58String(i.caller.bytes)
    if (getValueSupplier(supplierAddress) != NONE) then
      throw("Supplier is not registered yet")
    else { 
      let item = getKeyItem(supplierAddress, title)
      if(price <= 0) then throw("Purchase amount cannot be less than item price")
      else if(getValueItemSupplier(item) != NONE) then throw("An item is already exists")
      else {
        WriteSet([
            DataEntry(getKeyItemSupplier(item), supplierAddress),
            DataEntry(getKeyItemPrice(item), price),
            DataEntry(getKeyItemData(item), data)
        ])
      }
    }   
}

#Allow suppliers to approve a purchase
@Callable(i)
func approvesItemBySupplier(title: String, status: String) = {
    let supplierAddress = toBase58String(i.caller.bytes)
    if (getValueSupplier(supplierAddress) != NONE) then
      throw("Supplier is not registered yet")
    else if(getValueItemSupplierApproval(title, supplierAddress) != NONE) then throw("This item is already approved")
    else {
      WriteSet([
        DataEntry(getKeyItemSupplierApproval(title, supplierAddress), status)
      ])
    }
}

# ------------- Module 4  Callable Functions ----------
######################################################
 
# @Verifier(tx)
# func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
        
